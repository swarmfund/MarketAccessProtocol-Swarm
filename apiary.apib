FORMAT: 1A

# Market Access Protocol

Market Access Protocol (MAP) is Swarm’s investor compliance ecosystem, built and maintained by a decentralized network of nodes.
MAP solves existing inefficiencies and difficulties encountered by token issuers, investors, exchanges, and certificate issuers. 


It is a protocol that allows applications (blockchain or non-blockchain) to interact with users in a regulatory compliant manner, and results in a distributed ledger that stores investor qualification data, respecting user privacy. All personal identifiable information that is processed by MAP participants remains the property of the owner, and can only be revealed with the owner’s authority.

MAP provides liquidity for digital securities markets by leveraging investor qualifications through inheritance and network effects.

Investor qualifications are inherited from a single master identity to multiple wallets on any blockchain or application that supports the protocol, obfuscating the investor’s activity. Liquidity is further improved as network effects develop from the increased pool of qualified investors and use of the compliance infrastructure.

MAP enables the flow of compliant securities transactions to be processed by defining how market access data is stored, read, written and audited in accordance with its protocol. MAP takes care of investor compliance so that token issuers can focus on their core function of managing the assets and conveying their investment’s value proposition.

Until now, there has been no ‘one’ globally compliant protocol to provide a framework on which the industry can build to integrate and transfer security tokens in a uniform way. This is because each centralized, for-profit entity is incentivized to do what is best for themselves, not to think about interoperability or broader access beyond their scope. To that end, MAP is an open source infrastructure, designed to be the industry standard protocol empowering the entire security token market.

Market Access Protocol allows:

- Certificate issuers
- Token issuers
- Investors
- Wallets
- Exchanges

to easily add a compliance layer to any cryptocurrency based digital asset.

# API structure

## URL and REST structure

MAP API uses HTTPS only. All HTTP requests will be completely ignored.

The API relies on REST HTTP verbs to interact with the objects in the system. 

---

Resources are created/registered using the POST action.

        `POST /token-issuers`
        
If the resource already exists, it is returned with a `409 Conflicts` instead of a `201 Created` response code.

---

Resource data is retrieved using the GET action.

        `GET /token-issuers/<pubKey>`
        
--- 

Relationships are created between resources using the PUT action. The exact resource on which the relationship will be attached is implicitly recognized from the successfuly authenticated user.

        `PUT /token-issuer/<pubKey>`


---

`DELETE /certificate-issuers/<pub>/certs/<uid>`


## Response structure


A standard response structure will include the following header:

    `Content-Type: application/json`
    

## Data types

The response body will include a **JSON** encoded object of the resource requested.
The JSON structure returned is limited to primitives (boolean, number, string) and compounds (array, objects, null).

Date and DateTime elements are explicitly expected to be formatted in **ISO8601**.

DateTime elements accept a timezone in input but will always return a **UTC** formatted **ISO8601** string.

### Response codes and errors


**200**: OK - the action was executed and completed

**201**: Created - standard response to a POST action which also indicates that resource creation is also completed

Errors are indicated by http response code along with a corresponding human readable message. Additional details will be attached as a JSON encoded resource structure.

Standard errors are:

**400**: Parameter validation failed
            
**401**: Authentication headers required or failed
    
**403**: Requested resource is not available for the currently authenticated user

**404**: Resource not found

**405**: Method not allowed

**409**: Conflict

**429**: Too many requests, slow down and try again later

**422**: Unprocessable entity due to payload being too large in size.

**500**: Resource action failed due to internal error

**503**: Resource is currently unavailable due to maintenance or overloading, please try again later

## API versioning

The MAP API currently does not support versioning.

Versioning will be supported once braking changes are inevitable due to software improvement.

# Authentication

All users using the MAP API are authenticated using their public keys. Details of the authentication mechanism will be determined.

For now, we will assume the use of provided headers.

Whenever authentication is needed, these HTTP headers are required:

| Header name      | Description                                                                                   | Example                            |
|------------------|-----------------------------------------------------------------------------------------------|------------------------------------|
| X-MAP-Blockchain | The underlying blockchain of the wallet, needed to determine the exact signing algorithm used | Bitcoin                            |
| X-MAP-Address    | The public key of the wallet                                                                  | 1HZwkjkeaoZfTSaJxDw6aKkxp45agDiEzN |
| X-MAP-Signature  | The wallet address signed by the wallet's private key                                         |  NG8tFK3dNwQaiYA0VOu...            |


> ***WARNING:*** We **strongly** recommend generating a new wallet when first registering with MAP to prevent use of a signed public key that is compromised from a third-party service which uses a similar authentication scheme.

***NOTE:*** Successfully authenticated `PUT` requests will attach a relationship to the resource owned by the authenticated user. 

# Getting started

## Claims and Certificates

MAP uses a system of claims and certificates to prove that an investor is regulatory compliant or qualified to trade an asset subject to securities regulations in any jurisdiction.

A *claim* is any statement made by an investor that requires verification. For example, an investor may make the following claims:
* I am over 18 years old
* I am a resident of the United States
* I am an accredited investor
* I am not on a sanctions or politically-exposed persons list.


A *certificate* is a document that contains proof that a certain claim has been verified.
It can be thought of as a *verified claim*.
Certificates are associated with investors’ wallets after processing or verifying the data stated in a claim.
Certificates on MAP do not contain any personal information.
For example, a certificate may prove that a wallet belongs to an investor who is :
* over 18 years old
* a resident of the United States
* an accredited investor
* not on a sanctions or politically-exposed persons list

Certificates prove the authenticity or truth of a claim by an investor without revealing the underlying data.

Privacy is maintained by decoupling the operation of issuing a certificate - requiring an investor to submit personal information - from the operation of associating a wallet with a certificate - which reveals no personal information. The link between wallet and identity can only be established with the investor's authorization.


## Certificate issuer

The role of a certificate issuer is to issue certificates representing verification checks against any claims made by a subject. In the context of MAP, certificates usually verify the authenticity or truth of some data about an investor.

**Steps to register as a certificate issuer:**

1. [Register](#reference/certificate-issuer/account/register)
2. [Get certificate issuer](#reference/certificate-issuer/api-calls/get-certificate-issuer)
2. [Certificate registration](#reference/certificate-issuer/certificates/create-certificate)
3. [List of all certificates](#reference/certificate-issuer/certificates/get-certificate-list)
4. [Get certificate](#reference/certificate-issuer/certificates/get-certificate-by-uid)
5. [Delete certificate](#reference/certificate-issuer/certificates/delete-certificate)
5. [Register user certificate](#reference/certificate-issuer/certificates/register-user-certificate)

<!--![certificate issuer Flow](http://swarm-map-public-images.s3-website.us-east-2.amazonaws.com/certificate-issuer-light.svg)-->

## Token issuer

The role of a token issuer on the MAP blockchain relates to the registration of assets (tokens) and associators
for those assets.

1. [Register](#reference/token-issuer/api-calls/register)
2. [Get token issuer](#reference/token-issuer/api-calls/get-token-issuer)
3. [Register new asset](#reference/token-issuer/api-calls/register-asset)
4. [Register associator](#reference/token-issuer/api-calls/register-associator)
5. [Update KYA](#reference/token-issuer/api-calls/update-token-kya)

    <!--![Token Issuer Flow](http://swarm-map-public-images.s3-website.us-east-2.amazonaws.com/Token-issuer-light.svg)-->

## Associator

Associators enable investors to inherit qualifications from their master wallet to any other associated wallets.
Associators reissue previously obtained certificates to other wallets that are cryptographically proven to belong to a single identity.
Other than maintaining investor privacy, this process allows for the reusability of qualifications.

1. [List of wallet connection requests](#reference/associator/api-calls/list-of-wallet-connection-requests)
2. [Get wallet connection request](#reference/associator/api-calls/get-wallet-connection-request)
3. [Update wallet connection request](#reference/associator/api-calls/update-wallet-connection-request)


## Investor

The role of an investor is to obtain the certificates required by a token issuer to trade in a specific asset.
Investors acquire certificates by verifying the authenticity of some claim.
Certificates are stipulated by the token issuer in order to comply with a token's specific regulatory requirements.

1. [Send wallet connection request](#reference/investor/send-wallet-connection-request/send-wallet-connection-request)
2. [GET Authorization signature](#reference/investor/get-authorization-signature/get-authorization-signature)

<!--![Investor Flow](http://swarm-map-public-images.s3-website.us-east-2.amazonaws.com/Investor-light.svg)-->


## API integration

For using the SDK and MAP API please consult the [MAP API Docs](/docs/api).

## MAP blockchain

MAP is a registry of tokens, certificate issuers, claims, certificates and associations. It is architected as a decentralized network of nodes with a foundational blockchain layer. This permits:
- an open market for compliance;
- a fully auditable trail of compliance transactions;
- permissionless integration and participation;
- reusability of certificates;
- accountability through cryptographic proofs.

Privacy of personal information is preserved using certificates.
Certificates prove the authenticity or truth of a claim by an investor without revealing the underlying data.
Privacy is maintained by decoupling the operation of *issuing* a certificate -
requiring an investor to submit personal information - from the operation of *associating* a wallet with a certificate -
which reveals no personal information.
The link between wallet and identity can only be established with the investor's authorization. 

All actions triggered via the API are in fact blockchain transactions and are associated with each address (e.g. Token Issuer's).

The MAP blockchain is an immutable store of records that has two basic types of transactions:
1. Issuance - The action of granting a certificate to a requester
2. Association - The action of associating a certificate with a wallet

#### MAP properties `(<map> prefix)`

Properties MAP holds about objects such as wallets, assets, certificates, token issuers, certificate issuers, etc.


## Transfer restriction rules

Digital securities are subject to certain ownership and trading restrictions set by government authorities and regulators.
MAP allows token issuers to configure the restrictions that apply to their digital securities, and assures regulatory compliance by enforcing and checking restrictions with every attempt to make a transfer.

Transfer restrictions and rules are written by the token issuer into KYA - “Know Your Asset”, a file that is referenced in the original token contract.

Some rules reference properties that depend on the current state of the ledger, while other rules require checking a wallet for specific certificates.
This is handled by dividing transfer restrictions into two groups:
* rules to be checked natively on-chain where the token contract is deployed
* rules to be checked outside the native chain by MAP nodes.


### Transfer authorization flow

Transfer rules that are checked on-chain query the token contract.
The transfer method implementation should account for additional checks to be performed on-chain
before allowing a transfer to be executed.

Transfer rules that require checks outside of the original chain are written in *KYA* and are performed by MAP nodes.
A successful transfer requires an authorization signature from a MAP node with proof that all checks have been performed.
An example token contract should have the transfer method with at least the following signature:

```
transfer(address _to, uint256 _value, uint256 _nonce, uint256 _expiration, bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) public returns (bool success)
```

where msgHash consists of `(asset, from, to, data, nonce, expiration)` values. The **nonce** is used to prevent replay attacks while **expiration** represents the authorization's validity period. 

Transfers that require MAP authorization contain the following properties,
which are defined by the rules declaratively stated in KYA. 
1. Asset
2. Transfer
3. Transfer context

####Asset properties `(<token> prefix)`

Stable properties acquired from KYA or the token contract.
1. Creation time
2. Supply
3. Decimals
4. Blockchain
5. Network

####Transfer properties `(<transfer> prefix)`

Properties taken from a transfer request.
1. Asset
2. From
3. To
4. Value
5. Nonce

####Transfer context properties `(<ctx> prefix)`

Delivered to MAP nodes accepting authorization request.
1. IP
2. Timestamp
3. GEOIP

### Transfer restriction rules

As stated earlier, two sets of transfer restriction rules are defined in KYA:

1. Native Rules: Rules enforced natively on-chain where the token contract is deployed
2. MAP Rules: Rules enforced by MAP which are impossible or economically unfeasible to be performed natively on-chain

Native rules are defined by a single address of the contract enforcing the rules. 
MAP rules are stipulated in KYA. 

Example of the rules section of KYA:

```
"transferRules": {
    "contract": {
        "address": "0x..."
    },
    "map": {
        "type": "cert-list",
        "version": 1,
        "description": "https://example/assets/XYZ/rules.html"
        "rules": [{
            ...
        }]
    }
}
```

### Properties of transfer restriction rules

Transfer rules have the following properties:

1. `type`: an identifier for the types of rules stated in the *rules* property,
allowing for various implementations on how to check them. For example, “type: cert-list” would list all certification types that a wallet requires to be checked by a simple rule-engine. “Type: transfer-rules” could include a much more complex set of rules.
2. `version`: may not be needed as type can handle versioning issues.
3. `description`: URL of a document describing token transfer rules to investors. 
4. `rules`: JSON document with a definition of rules for the specific type.

MAP nodes need to have an implementation of rule checks for transfer_rules.map.type,
or transfer restriction authorizations will return an error indicating unknown rule type in KYA.

## KYA "Know Your Asset" document

The KYA document has at least the following top level properties:

1. `token`: token properties listing which can be used on MAP node.
2. `properties`: various token properties, like an icon, description, etc.
3. `transferRules`: properties defining native on-chain and MAP transfer rules.

Example of a KYA document follows:

```
{
    "token": {
        "blockchain": "Ethereum",
        "network": 1,
        "address": "0x...",
        "name": "Security token",
        "symbol": "XYZ",
        "decimals": 18,
        "supply": 10000000,
        "created": "2019-02-19T12:04:50+00:00"  
    },
    "properties": {
        ...
    },
    "transferRules": {
        "contract": {
            "address": "0x..."
        },
        "map": {
            "type": "cert-list",
            "version": 1,
            "description": "https://example/assets/XYZ/rules.html"
            "rules": [{
                ...
            }]
        }
    }
}
```


# Group Certificate issuer

Certificate issuers are entities that issue various types of trusted certificates.
A certificate is proof that a certificate issuer has verified the authenticity of a claim.
Certificate issuers must register themselves on MAP, update a list of supported claims and the required data a subject must provide in order to obtain a certificate.
A typical certificate would be a KYC certificate issued to a prospective investor verifying their claim that they are who they say they are.
Claims, as certificate types, are identified by a unique id.

Information about the existence of a certificate is registered on MAP, along with the basic data required to check the validity of a registered certificate.
The certificate is identified by a certificate's unique id and the subject's public key.

## API calls [/certificate-issuers]

### Register [POST]

Registers a new certificate issuer.

+ Request (application/json)

    + Headers
        
            X-MAP-Signature: 1HZwkjkeaoZfTSaJxDw6aKkxp45agDiEzNG8tFK3dNwQaiYA0VOuhMBOjcdydR5gyKh/IAr9rSqDXy93cVqKDZkYv/LjfLpJ8PfJKGrUovjisT9rhMWg8Z5wM=
    
    + Body
    
            {
                name: "The user-provided arbitrary name of the certificate issuer",
                publicKey: "{publicKey}",
            }
    
    + Attributes

        + name: `The user-provided arbitrary name of the certificate issuer.` (required)
        + publicKey: `public key certificate issuer will use to sign objects.` (required)

+ Response 201 (application/json)

    + Attributes (certificate issuer)            

## Get certificate issuer [GET /certificate-issuers/{pubKey}]

Retrieve certificate issuer object.

+ Request

    + Parameters
    
        + pubKey: public key certificate issuer will use to sign objects.

+ Response 200 (application/json)

    + Attributes (certificate issuer)
    
## Certificates [/certificates]

A certificate is a cryptographically proven verification of the authenticity or truth of some 
data (claim) that is issued by anyone taking the role of a certificate issuer.

Examples of a certificate may be:
- Proof of identity
- Proof of residence
- Sanctions list clearance

### Register user certificate [POST /certificate-issuers/{pubKey}/certificates]

Register issuance of certificate for specific investor and claim.

+ Request (application/json)
    + Headers

            X-MAP-Signature: 1HZwkjkeaoZfTSaJxDw6aKkxp45agDiEzNG8tFK3dNwQaiYA0VOuhMBOjcdydR5gyKh/IAr9rSqDXy93cVqKDZkYv/LjfLpJ8PfJKGrUovjisT9rhMWg8Z5wM=
    
    + Body
    
            {
                "issuer": "",
                "investor": "",
                "claim": "",
                "expiration": ""
            }
            
    + Attributes
            
        + issuer: certificate issuer public key. (required)
        + expiration: Expiration datetime. (required)
        + investor: Investor public key. (required)
        + certificate: Certificate UID. (required)

+ Response 201

    + Attributes
        
        + uid: Generated claim uid.
        + issuer: certificate issuer public key.
        + expirationDate: Expiration datetime.
        + investor: Investor public key.
        + certificate: Certificate UID.

### Register certificate [POST /certificate-issuers/{pubKey}/certificate]

Register certificates available from a certificate issuer on MAP.

+ Request (application/json)
    
    + Headers

            X-MAP-Signature: 1HZwkjkeaoZfTSaJxDw6aKkxp45agDiEzNG8tFK3dNwQaiYA0VOuhMBOjcdydR5gyKh/IAr9rSqDXy93cVqKDZkYv/LjfLpJ8PfJKGrUovjisT9rhMWg8Z5wM=
    
    + Body
    
            {
                "description": "Description of the certificate",
                "constraints": {
                    ...
                }
            }
            
    + Attributes
            
        + description: Holds specific details of this qualification. (required)
        + constraints: Additional constrainst that may apply to the certificate. (optional)

+ Response 201

    + Attributes (Certificate)
    

### List certificate [GET /certificate-issuers/{pubKey}/certificates]

List certificate available from a certificate issuer.

+ Request (application/json)

+ Response 200

    + Attributes (array[Certificate])
    

### Get certificate [GET /certificate-issuers/{pubKey}/certificate/{uid}]

Get details about a specific certificate.

+ Request (application/json)

+ Response 200

    + Attributes (Certificate)
    

### Delete certificate [DELETE /certificate-issuers/{pubKey}/certificate/{uid}]

Deregister a certificate. Future certificate registrations of this type are not possible,
but issued certificates of this type remain valid until specific expiration.

+ Request (application/json)

+ Response 200

# Group Token Issuer

Token issuers are entities who control token operations. In the context of MAP, they are primarily 
responsible for token registration and registering associators for tokens. Token issuers need to 
register themselves on MAP so that other parties may verify their actions. 

## API calls [/token-issuers]

### Register [POST]

Registers the token issuer.

+ Request (application/json)

    + Headers
        
            X-MAP-Signature: 1HZwkjkeaoZfTSaJxDw6aKkxp45agDiEzNG8tFK3dNwQaiYA0VOuhMBOjcdydR5gyKh/IAr9rSqDXy93cVqKDZkYv/LjfLpJ8PfJKGrUovjisT9rhMWg8Z5wM=
    
    + Attributes
    
        + name: `Token issuer name` (string, required)
        + publicKey: `Public key` (string, optional)

+ Response 201 (application/json)

    + Attributes (Token issuer)
    
### Get token issuer [GET /token-issuers/{pubKey}]

Get information about a token issuer.

+ Response 200 (application/json)

    + Attributes (Token issuer)
    
### Register asset [POST /token-issuers/{pubKey}/assets]

Adds a new asset to the MAP blockchain.

+ Request (application/json)

    + Headers
        
            X-MAP-Signature: 1HZwkjkeaoZfTSaJxDw6aKkxp45agDiEzNG8tFK3dNwQaiYA0VOuhMBOjcdydR5gyKh/IAr9rSqDXy93cVqKDZkYv/LjfLpJ8PfJKGrUovjisT9rhMWg8Z5wM=
    
    + Body
    
            {
                address: ""
                name: "",
                description: "",
                symbol: "",
                decimals: 0,
                supply: 0,
                kya: {
                    hash: "",
                    url: ""
                }
            }
    
    + Attributes
    
        + address: `Token contract address` (string, required)
        + name: `The asset name` (string, required)
        + description: `The description of asset` (string, required)
        + symbol: `Token symbol` (string, required)
        + decimals: `Token decimals` (number, required)
        + supply: `Initial token supply` (number, required)
        + properties: `Some other fields that will be inserted` (string, optional)
        + kya: `Asset description document` (KYA location, required)

+ Response 201 (application/json)

    + Attributes (Asset)
    
    
### Register associator for asset [POST /token-issuers/{pubKey}/assets/{pubKey}/associators/{pubKey}]

Register associator that can issue certificate for asset wallets.

+ Request (application/json)

    + Headers
        
            X-MAP-Signature: 1HZwkjkeaoZfTSaJxDw6aKkxp45agDiEzNG8tFK3dNwQaiYA0VOuhMBOjcdydR5gyKh/IAr9rSqDXy93cVqKDZkYv/LjfLpJ8PfJKGrUovjisT9rhMWg8Z5wM=

+ Response 200 (application/json)


### Unsregister associator for asset [DELETE /token-issuers/{pubKey}/assets/{pubKey}/associators/{pubKey}]

Unregistering associator for asset.

+ Request (application/json)

    + Headers
        
            X-MAP-Signature: 1HZwkjkeaoZfTSaJxDw6aKkxp45agDiEzNG8tFK3dNwQaiYA0VOuhMBOjcdydR5gyKh/IAr9rSqDXy93cVqKDZkYv/LjfLpJ8PfJKGrUovjisT9rhMWg8Z5wM=

+ Response 200 (application/json)


### Update KYA [PUT /token-issuers/{pubKey}/assets/{pubKey}/kya]

Update KYA document properties. 

+ Request 

    + Body 
        {
            hash: "",
            url: ""
        }
    
    + Attributes

+ Response 200 (application/json)


# Group Associator

Associators respond to certificate-wallet registration requests, creating an association between a certificate and a wallet.
Associators are the only entities in MAP that possess investor-wallet connection information, handling registration tasks and saving connection information off-site.

## API calls [/associators]


### List of wallet connection requests [GET /associator/{pubKey}/requests?status={status}]

List wallet connection requests.

+ Request
    + Parameters
        + status: `status of wallet connection request` (string, optional)

+ Response 200 (application/json)
    + Attributes 
        +requests: `array of wallet connection request objects uids` (array[string])
    
    
### Get wallet connection request [GET /associator/{pubKey}/requests/{uid}]

Retrieve specific wallet connection request.

+ Response 200 (application/json)
    + Attributes
        + request: `Encrypted investor request.` (string, required)

### Update wallet connection request [PUT /associator/{pubKey}/requests/{uid}]

Update specific wallet connection request. This call is used to reassign identity certifications to a wallet. 

+ Request 
    + Body 
        {
            status: "",
            certifications: []
        }
    
    + Attributes
        + status: `Status of request` (string, required)
        + certificates: `Array of certificates for wallet` (array, required)

+ Response 200 (application/json)


# Group Investor

Investors, identified by their MAP public keys, are entities expected to obtain certificates from certificate issuers.
Certificates, stored on MAP, combine to *qualify* investor wallets, allowing them to participate in asset trading. 


## Investor wallet registration
Protection of investor privacy is accomplished by separating the wallet and investor objects, and keeping their
connection information off-MAP in the token issuer's or associator's records. The wallet registration flow facilitates this
separation:

1. An investor sends a wallet registration request for a selected asset to MAP, encrypting the whole request object 
in such a manner that only the destination token issuer or associator can read the information about the investor
and the connecting Wallet.

2. The token issuer handles the request by recording investor-wallet connections for possible future regulatory 
queries, reissuing investor certificates with the same claims and properties, and connecting a new wallet's 
public key.

Any entity wishing to check a wallet's qualification to trade a particular token can query the wallet's certificates,
this includes applications, exchanges and even decentralized exchanges.

### Send wallet connection request [POST /associator/{pubKey}/requests]

Send wallet connection request for specified asset to associator. Encrypted request data object consists of:

1. Investor public key
2. Details of wallet (blockchain, address)
3. Array of Investor's certificates for reissuance by associator
4. Investor's signature of the request data
5. Wallet's signature of the request data

Request data object is encrypted with the designated asset's token issuer key.

+ Request (application/json)

    + Body
    
            {
                request: "encrypted request data",
            }
    
    + Attributes

        + request: `Encrypted request data.` (string, optional)

+ Response 200 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)


### Get authorization signature [GET /authorizations]

An authorization signature must be obtained for transfer rules which require checks made by MAP. 
This authorization needs to be obtained before the transfer method is called in the token contract 
and is given after all rules are checked by MAP nodes.

Returned authorizations need to carry a relatively short expiration time, to prevent users from 
using them too far into the future.


+ Request (application/json)

    + Body
        {
            "asset": "",
            "from": "",
            "to": "",
            "value": "",
            "nonce": 0
        }
        
    + Attributes
        + assets: `UID of asset` (string, required)
        + from: `Asset's wallet` (string, required)
        + to: `Asset's wallet` (string, required)
        + value: `Transfer value` (string, required)
        + nonce: `Token nonce from asset contract` (number, required)

+ Response 200
    + Attributes
        + assets: `UID of asset` (string, required)
        + from: `Asset's wallet` (string, required)
        + to: `Asset's wallet` (string, required)
        + value: `Transfer value` (string, required)
        + nonce: `Token nonce` (number, required)
        + expiration: `Expiration of authorization` (string, required)
        + authorization: `object describing signed authorization data <asset/from/to/value/nonce/expiration>` (object, required)

      

# Group Exchange

Exchanges use MAP to get certificates for specified investors.

### Get investor certificate [GET /certificates/{pubKey}:{uid}]

Retrieve certificate for investor.

+ Request (application/json)
    + Attributes

        + pubKey: `Investor MAP public key` (string, required)
        + uid: `Claim uid` (string, required)

+ Response 200 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)
            

# Data structure


## Token issuer (object)

+ name: `The token issuer name` (string, required)
+ publicKey: `The public key of the token issuer.` (string, optional)


## Asset (object)

+ uid: `The asset uid` (string, required)
+ name: `The user-provided arbitrary name of the asset` (string, required)
+ description: `The user-provided arbitrary description of the asset` (string, required)
+ kya: `The KYA` (KYA location, required)


## certificate issuer (object)

+ name: `The user-provided arbitrary name of the certificate issuer.` (string, required)
+ publicKey: `Ed25519 public key certificate issuer will use to sign objects.` (string, required)


## Claim (object)

+ uid: `Generated claim uid` (string, required)
+ description: `Description of this claim.` (string, required)
+ constraints: `Additional constrainst that may apply to the claim.` (optional)

## Certificate (object)

+ uid: `Generated certificate uid` (string, required)
+ issuer: `Public key of certificate issuer.` (string, required)
+ investor: `Public key of certificate subject.` (string, required)
+ claim: `UID of certified claim.` (string, required)
+ expiration: `Certificate validity.` (number, optional)

## KYA location (object)

+ hash: `sha256 hash of document data.` (string, required)
+ url: `location of documents.` (string, required)


## Investor (object)

+ name: `The user-provided arbitrary name of the token issuer` (string, required)
+ ipfsMetadata: `The IPFS hash which contains arbitrary user-provided metadata.` (string, optional)
+ domain: `The fully qualified domain name which will be used for certificate issuer verification purposes.`